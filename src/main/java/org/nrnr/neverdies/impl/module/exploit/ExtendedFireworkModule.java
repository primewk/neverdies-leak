package org.nrnr.neverdies.impl.module.exploit;

import net.minecraft.entity.projectile.FireworkRocketEntity;
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.minecraft.network.packet.s2c.play.EntitiesDestroyS2CPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import org.nrnr.neverdies.api.event.listener.EventListener;
import org.nrnr.neverdies.api.module.ModuleCategory;
import org.nrnr.neverdies.api.module.ToggleModule;
import org.nrnr.neverdies.impl.event.TickEvent;
import org.nrnr.neverdies.impl.event.entity.projectile.RemoveFireworkEvent;
import org.nrnr.neverdies.impl.event.network.PacketEvent;
import org.nrnr.neverdies.init.Managers;
import org.nrnr.neverdies.mixin.accessor.AccessorFireworkRocketEntity;
import org.nrnr.neverdies.util.math.timer.CacheTimer;
import org.nrnr.neverdies.util.math.timer.Timer;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Neverdies
 * @since 1.0
 */
public class ExtendedFireworkModule extends ToggleModule {
    private final List<CommonPongC2SPacket> packetList = new ArrayList<>();
    //
    private boolean extendFirework;
    private final Timer extendFireworkTimer = new CacheTimer();
    private FireworkRocketEntity firework;

    /**
     *
     */
    public ExtendedFireworkModule() {
        super("ExtendedFirework", "Extends firework boost duration",
                ModuleCategory.EXPLOITS);
    }

    @Override
    public void onDisable() {
        if (firework != null) {
            ((AccessorFireworkRocketEntity) firework).hookExplodeAndRemove();
        }
        firework = null;
        extendFirework = false;
        for (CommonPongC2SPacket packet : packetList) {
            Managers.NETWORK.sendPacket(packet);
        }
        packetList.clear();
    }

    @EventListener
    public void onRemoveFirework(RemoveFireworkEvent event) {
        if (mc.player == null) {
            return;
        }
        if (mc.player.isFallFlying() && firework != event.getRocketEntity()
                && ((AccessorFireworkRocketEntity) event.getRocketEntity()).hookWasShotByEntity()
                && ((AccessorFireworkRocketEntity) event.getRocketEntity()).getShooter() == mc.player) {
            extendFirework = true;
            event.cancel();
            firework = event.getRocketEntity();
            extendFireworkTimer.reset();
        }
    }

    @EventListener
    public void onTick(TickEvent event) {
        if (!extendFirework) {
            return;
        }
        if (!mc.player.isFallFlying() || mc.player.isOnGround() || extendFireworkTimer.passed(50000)) {
            extendFirework = false;
            if (firework != null) {
                ((AccessorFireworkRocketEntity) firework).hookExplodeAndRemove();
                firework = null;
            }
            for (CommonPongC2SPacket packet : packetList) {
                Managers.NETWORK.sendPacket(packet);
            }
            packetList.clear();
        }
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event) {
        if (mc.player == null || mc.world == null) {
            return;
        }
        if (event.getPacket() instanceof CommonPongC2SPacket packet
                && extendFirework && mc.player.isFallFlying()) {
            event.cancel();
            packetList.add(packet);
        }
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Inbound event) {
        if (mc.player == null || mc.world == null || !mc.player.isFallFlying() || !extendFirework) {
            return;
        }
        if (event.getPacket() instanceof EntitiesDestroyS2CPacket packet && firework != null) {
            for (int id : packet.getEntityIds()) {
                if (id == firework.getId()) {
                    event.cancel();
                    return;
                }
            }
        }
        if (event.getPacket() instanceof PlayerPositionLookS2CPacket packet) {
            extendFirework = false;
            if (firework != null) {
                ((AccessorFireworkRocketEntity) firework).hookExplodeAndRemove();
                firework = null;
            }
            for (CommonPongC2SPacket p : packetList) {
                Managers.NETWORK.sendPacket(p);
            }
            packetList.clear();
        }
    }

    public boolean isExtendingFirework() {
        return extendFirework;
    }
}